<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
   
    <!-- 在web.xml中，加载顺序为：context-param -> listener -> filter -> servlet -->
    <!-- 所以是先加载spring-mybatis.xml，再加载spring-mvc.xml，所以在使用自动扫描注解（<context:component-scan/>）的时候，
    	必须先在spring-maybatis.xml写，在spring-mvc.xml则写不写无所谓 -->
  
     <!-- 该标签将自动开启“注解实现Bean依赖注入”支持.这条语句是扫描org.luojj下被@XXX(如 @Component, @Service, @Repository)
   		    注解的那些类，并进行实例化。 --> 
    <mvc:annotation-driven/>
  	<context:component-scan base-package="org.luojj.*"/>
    <!-- 引入配置文件 -->  
    
     <bean id="propertyConfigurer"  
	        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
	        <property name="location" value="classpath:jdbc-product-dev.properties" />  
	 </bean>
    
   
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"  
        destroy-method="close">  
        <property name="driverClassName" value="${driver}" />  
        <property name="url" value="${url}" />  
        <property name="username" value="${user}" />  
        <property name="password" value="${password}" />  
        <!-- 初始化连接大小 -->  
        <property name="initialSize" value="${initialSize}"></property>  
        <!-- 连接池最大数量 -->  
        <property name="maxActive" value="${maxActive}"></property>  
        <!-- 连接池最大空闲 -->  
        <property name="maxIdle" value="${maxIdle}"></property>  
        <!-- 连接池最小空闲 -->  
        <property name="minIdle" value="${minIdle}"></property>  
        <!-- 获取连接最大等待时间 -->  
        <property name="maxWait" value="${maxWait}"></property>  
    </bean>  
  
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath*:*Dao.xml"></property>  
      
    </bean>  
  	
    <!-- DAO接口所在包名，这里会把mapper(dao)接口自动实例化，注入到spring中 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="org.luojj.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>  
    
     
  
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  
    
 
	   
  
    
    
  
</beans>  